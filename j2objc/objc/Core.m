//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/fepriyadi/dev/android/office/mnc/digital/analytics/mobile-sdk/iospowerlytics/j2objc/java/Core.java
//

#include "Core.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "TTask.h"
#include "android/os/AsyncTask.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/security/MessageDigest.h"
#include "java/util/UUID.h"
#include "java/util/concurrent/TimeUnit.h"
#include "javax/net/ssl/HttpsURLConnection.h"
#include "org/json/JSONArray.h"
#include "org/json/JSONObject.h"

#if !__has_feature(objc_arc)
#error "Core must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComPowerAnalyticsCore ()

- (void)clearTmVars;

- (void)videoMeasure_WithNSString:(NSString *)sessid
                     withNSString:(NSString *)label
                     withNSString:(NSString *)value
                     withNSString:(NSString *)value2;

- (void)clearLoadData;

- (void)setLastTimeMillisEvent;

- (void)doFlushDataWithNSString:(NSString *)data;

- (NSString *)getSdkUserAgent;

- (NSString *)getHashWithNSString:(NSString *)s;

@end

inline jboolean ComPowerAnalyticsCore_get_bOnFlushingData(void);
inline jboolean ComPowerAnalyticsCore_set_bOnFlushingData(jboolean value);
inline jboolean *ComPowerAnalyticsCore_getRef_bOnFlushingData(void);
static jboolean ComPowerAnalyticsCore_bOnFlushingData = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComPowerAnalyticsCore, bOnFlushingData, jboolean)

inline jboolean ComPowerAnalyticsCore_get_bForceDataFlush(void);
inline jboolean ComPowerAnalyticsCore_set_bForceDataFlush(jboolean value);
inline jboolean *ComPowerAnalyticsCore_getRef_bForceDataFlush(void);
static jboolean ComPowerAnalyticsCore_bForceDataFlush = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComPowerAnalyticsCore, bForceDataFlush, jboolean)

inline NSString *ComPowerAnalyticsCore_get_sUrlStaging(void);
inline NSString *ComPowerAnalyticsCore_set_sUrlStaging(NSString *value);
static NSString *ComPowerAnalyticsCore_sUrlStaging = @"https://analytic-ott.stg.mncanalytics.id";
J2OBJC_STATIC_FIELD_OBJ(ComPowerAnalyticsCore, sUrlStaging, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sSdkVer(void);
static NSString *ComPowerAnalyticsCore_sSdkVer = @"1.0.0";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComPowerAnalyticsCore, sSdkVer, NSString *)

inline jint ComPowerAnalyticsCore_get_nMaxIndexToFlush(void);
#define ComPowerAnalyticsCore_nMaxIndexToFlush 16
J2OBJC_STATIC_FIELD_CONSTANT(ComPowerAnalyticsCore, nMaxIndexToFlush, jint)

inline NSString *ComPowerAnalyticsCore_get_sFnameStore(void);
static NSString *ComPowerAnalyticsCore_sFnameStore = @"bW5jX2RpZ2l0YWxfYW5hbHl0aWNz";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComPowerAnalyticsCore, sFnameStore, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sFnameFlush(void);
static NSString *ComPowerAnalyticsCore_sFnameFlush = @"X21uY19kaWdpdGFsX2FuYWx5dGljcw";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComPowerAnalyticsCore, sFnameFlush, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sFnameDUuid(void);
static NSString *ComPowerAnalyticsCore_sFnameDUuid = @"X21kYV91dWlkXw";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComPowerAnalyticsCore, sFnameDUuid, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sFnameUserID(void);
static NSString *ComPowerAnalyticsCore_sFnameUserID = @"X3VzZXJfdXVpZF8";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComPowerAnalyticsCore, sFnameUserID, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sFnameClientKey(void);
static NSString *ComPowerAnalyticsCore_sFnameClientKey = @"X2NsaWVudF9rZXlf";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComPowerAnalyticsCore, sFnameClientKey, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sFnameProductDomain(void);
static NSString *ComPowerAnalyticsCore_sFnameProductDomain = @"X3Byb2R1Y3RfZG9tYWluXw";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComPowerAnalyticsCore, sFnameProductDomain, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sFnameBundleId(void);
static NSString *ComPowerAnalyticsCore_sFnameBundleId = @"X2J1bmRsZV9pZF8";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComPowerAnalyticsCore, sFnameBundleId, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sFnameIsProduction(void);
static NSString *ComPowerAnalyticsCore_sFnameIsProduction = @"X2lzX3Byb2R1Y3Rpb25f";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComPowerAnalyticsCore, sFnameIsProduction, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sFnameVideoSessionId(void);
static NSString *ComPowerAnalyticsCore_sFnameVideoSessionId = @"X3ZpZGVvX3Nlc3Npb25faWRf";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComPowerAnalyticsCore, sFnameVideoSessionId, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sFnameVideoCtgIdName(void);
static NSString *ComPowerAnalyticsCore_sFnameVideoCtgIdName = @"X3ZpZGVvX2N0Z19pZF9uYW1lXw";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComPowerAnalyticsCore, sFnameVideoCtgIdName, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sFnameVideoAttributes(void);
static NSString *ComPowerAnalyticsCore_sFnameVideoAttributes = @"X3ZpZGVvX2F0dHJpYnV0ZXNf";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComPowerAnalyticsCore, sFnameVideoAttributes, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sFnameVideoTags(void);
static NSString *ComPowerAnalyticsCore_sFnameVideoTags = @"X3ZpZGVvX3RhZ3Nf";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComPowerAnalyticsCore, sFnameVideoTags, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sFnameLastTsEvent(void);
static NSString *ComPowerAnalyticsCore_sFnameLastTsEvent = @"X2xhc3RfdHNfZXZlbnRf";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComPowerAnalyticsCore, sFnameLastTsEvent, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sFnameFlushState(void);
static NSString *ComPowerAnalyticsCore_sFnameFlushState = @"X2FpetYoeFpYdHrd";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComPowerAnalyticsCore, sFnameFlushState, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sVideoMeasureSessionId(void);
inline NSString *ComPowerAnalyticsCore_set_sVideoMeasureSessionId(NSString *value);
static NSString *ComPowerAnalyticsCore_sVideoMeasureSessionId = @"";
J2OBJC_STATIC_FIELD_OBJ(ComPowerAnalyticsCore, sVideoMeasureSessionId, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sHashVideoCtgIdName(void);
inline NSString *ComPowerAnalyticsCore_set_sHashVideoCtgIdName(NSString *value);
static NSString *ComPowerAnalyticsCore_sHashVideoCtgIdName = @"";
J2OBJC_STATIC_FIELD_OBJ(ComPowerAnalyticsCore, sHashVideoCtgIdName, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sHashVideoAttributes(void);
inline NSString *ComPowerAnalyticsCore_set_sHashVideoAttributes(NSString *value);
static NSString *ComPowerAnalyticsCore_sHashVideoAttributes = @"";
J2OBJC_STATIC_FIELD_OBJ(ComPowerAnalyticsCore, sHashVideoAttributes, NSString *)

inline NSString *ComPowerAnalyticsCore_get_sHashVideoTags(void);
inline NSString *ComPowerAnalyticsCore_set_sHashVideoTags(NSString *value);
static NSString *ComPowerAnalyticsCore_sHashVideoTags = @"";
J2OBJC_STATIC_FIELD_OBJ(ComPowerAnalyticsCore, sHashVideoTags, NSString *)

inline jdouble ComPowerAnalyticsCore_get_fLastVideoDuration(void);
inline jdouble ComPowerAnalyticsCore_set_fLastVideoDuration(jdouble value);
inline jdouble *ComPowerAnalyticsCore_getRef_fLastVideoDuration(void);
static jdouble ComPowerAnalyticsCore_fLastVideoDuration = 0.0;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComPowerAnalyticsCore, fLastVideoDuration, jdouble)

inline jint ComPowerAnalyticsCore_get_nVideoPlayTm(void);
inline jint ComPowerAnalyticsCore_set_nVideoPlayTm(jint value);
inline jint *ComPowerAnalyticsCore_getRef_nVideoPlayTm(void);
static jint ComPowerAnalyticsCore_nVideoPlayTm = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComPowerAnalyticsCore, nVideoPlayTm, jint)

inline jint ComPowerAnalyticsCore_get_nVideoPlayingTm(void);
inline jint ComPowerAnalyticsCore_set_nVideoPlayingTm(jint value);
inline jint *ComPowerAnalyticsCore_getRef_nVideoPlayingTm(void);
static jint ComPowerAnalyticsCore_nVideoPlayingTm = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComPowerAnalyticsCore, nVideoPlayingTm, jint)

inline jint ComPowerAnalyticsCore_get_nVideoBufferTm(void);
inline jint ComPowerAnalyticsCore_set_nVideoBufferTm(jint value);
inline jint *ComPowerAnalyticsCore_getRef_nVideoBufferTm(void);
static jint ComPowerAnalyticsCore_nVideoBufferTm = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComPowerAnalyticsCore, nVideoBufferTm, jint)

inline jint ComPowerAnalyticsCore_get_nVideoSeekTm(void);
inline jint ComPowerAnalyticsCore_set_nVideoSeekTm(jint value);
inline jint *ComPowerAnalyticsCore_getRef_nVideoSeekTm(void);
static jint ComPowerAnalyticsCore_nVideoSeekTm = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComPowerAnalyticsCore, nVideoSeekTm, jint)

inline jint ComPowerAnalyticsCore_get_nVideoBitrateTm(void);
inline jint ComPowerAnalyticsCore_set_nVideoBitrateTm(jint value);
inline jint *ComPowerAnalyticsCore_getRef_nVideoBitrateTm(void);
static jint ComPowerAnalyticsCore_nVideoBitrateTm = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComPowerAnalyticsCore, nVideoBitrateTm, jint)

inline jint ComPowerAnalyticsCore_get_nLastVideoBitrate(void);
inline jint ComPowerAnalyticsCore_set_nLastVideoBitrate(jint value);
inline jint *ComPowerAnalyticsCore_getRef_nLastVideoBitrate(void);
static jint ComPowerAnalyticsCore_nLastVideoBitrate = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComPowerAnalyticsCore, nLastVideoBitrate, jint)

inline jint ComPowerAnalyticsCore_get_nLastAudioBitrate(void);
inline jint ComPowerAnalyticsCore_set_nLastAudioBitrate(jint value);
inline jint *ComPowerAnalyticsCore_getRef_nLastAudioBitrate(void);
static jint ComPowerAnalyticsCore_nLastAudioBitrate = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComPowerAnalyticsCore, nLastAudioBitrate, jint)

inline jlong ComPowerAnalyticsCore_get_nLastVideoEventTm(void);
inline jlong ComPowerAnalyticsCore_set_nLastVideoEventTm(jlong value);
inline jlong *ComPowerAnalyticsCore_getRef_nLastVideoEventTm(void);
static jlong ComPowerAnalyticsCore_nLastVideoEventTm = 0LL;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComPowerAnalyticsCore, nLastVideoEventTm, jlong)

__attribute__((unused)) static void ComPowerAnalyticsCore_clearTmVars(ComPowerAnalyticsCore *self);

__attribute__((unused)) static void ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(ComPowerAnalyticsCore *self, NSString *sessid, NSString *label, NSString *value, NSString *value2);

__attribute__((unused)) static void ComPowerAnalyticsCore_clearLoadData(ComPowerAnalyticsCore *self);

__attribute__((unused)) static void ComPowerAnalyticsCore_setLastTimeMillisEvent(ComPowerAnalyticsCore *self);

__attribute__((unused)) static void ComPowerAnalyticsCore_doFlushDataWithNSString_(ComPowerAnalyticsCore *self, NSString *data);

__attribute__((unused)) static NSString *ComPowerAnalyticsCore_getSdkUserAgent(ComPowerAnalyticsCore *self);

__attribute__((unused)) static NSString *ComPowerAnalyticsCore_getHashWithNSString_(ComPowerAnalyticsCore *self, NSString *s);

@interface ComPowerAnalyticsCore_AnalyticsHit : ComPowerAnalyticsTTask {
 @public
  ComPowerAnalyticsCore *this$0_;
  NSString *sData_;
}

- (instancetype)initWithComPowerAnalyticsCore:(ComPowerAnalyticsCore *)outer$
                                 withNSString:(NSString *)data;

- (void)ttDone;

- (id)ttBackground;

@end

J2OBJC_EMPTY_STATIC_INIT(ComPowerAnalyticsCore_AnalyticsHit)

J2OBJC_FIELD_SETTER(ComPowerAnalyticsCore_AnalyticsHit, sData_, NSString *)

__attribute__((unused)) static void ComPowerAnalyticsCore_AnalyticsHit_initWithComPowerAnalyticsCore_withNSString_(ComPowerAnalyticsCore_AnalyticsHit *self, ComPowerAnalyticsCore *outer$, NSString *data);

__attribute__((unused)) static ComPowerAnalyticsCore_AnalyticsHit *new_ComPowerAnalyticsCore_AnalyticsHit_initWithComPowerAnalyticsCore_withNSString_(ComPowerAnalyticsCore *outer$, NSString *data) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComPowerAnalyticsCore_AnalyticsHit *create_ComPowerAnalyticsCore_AnalyticsHit_initWithComPowerAnalyticsCore_withNSString_(ComPowerAnalyticsCore *outer$, NSString *data);

J2OBJC_TYPE_LITERAL_HEADER(ComPowerAnalyticsCore_AnalyticsHit)

NSString *ComPowerAnalyticsCore_sDUuid = @"";
NSString *ComPowerAnalyticsCore_sClientKey = @"";
NSString *ComPowerAnalyticsCore_sBundleId = @"";
NSString *ComPowerAnalyticsCore_sPlatform = @"";
jboolean ComPowerAnalyticsCore_bProduction = false;
jboolean ComPowerAnalyticsCore_bDryRun = false;
jboolean ComPowerAnalyticsCore_bUsingLastSessId = false;
NSString *ComPowerAnalyticsCore_sProductDomain = @"";
NSString *ComPowerAnalyticsCore_sUserID = @"";

@implementation ComPowerAnalyticsCore

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComPowerAnalyticsCore_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)dpWithNSString:(NSString *)s {
  ComPowerAnalyticsCore_dpWithNSString_(s);
}

- (NSString *)getDeviceDetails {
  return @"";
}

- (NSString *)getAppVersion {
  return @"";
}

- (NSString *)getAppStringWithNSString:(NSString *)fname {
  return nil;
}

- (jboolean)setAppStringWithNSString:(NSString *)fname
                        withNSString:(NSString *)s {
  return false;
}

- (void)setClientStuffWithNSString:(NSString *)platform
                      withNSString:(NSString *)clientKey
                      withNSString:(NSString *)productDomain
                      withNSString:(NSString *)bundleId
                      withNSString:(NSString *)userID {
  if (platform == nil || [platform java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"setClientStuff: platform should not null or empty");
    return;
  }
  ComPowerAnalyticsCore_sPlatform = platform;
  NSString *flustData = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameFlush];
  if (flustData == nil || [flustData java_isEmpty]) {
    [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameFlushState withNSString:@"false"];
  }
  if (clientKey == nil || [clientKey java_isEmpty]) {
    if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sClientKey)) java_isEmpty]) {
      NSString *ck = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameClientKey];
      if (ck != nil && ![ck java_isEmpty]) {
        ComPowerAnalyticsCore_sClientKey = ck;
      }
    }
  }
  else {
    ComPowerAnalyticsCore_sClientKey = clientKey;
    [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameClientKey withNSString:ComPowerAnalyticsCore_sClientKey];
  }
  if (productDomain == nil || [productDomain java_isEmpty]) {
    if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sProductDomain)) java_isEmpty]) {
      NSString *pd = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameProductDomain];
      if (pd != nil && ![pd java_isEmpty]) {
        ComPowerAnalyticsCore_sProductDomain = pd;
      }
    }
  }
  else {
    ComPowerAnalyticsCore_sProductDomain = productDomain;
    [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameProductDomain withNSString:ComPowerAnalyticsCore_sProductDomain];
  }
  if (bundleId == nil || [bundleId java_isEmpty]) {
    if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sBundleId)) java_isEmpty]) {
      NSString *bid = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameBundleId];
      if (bid != nil && ![bid java_isEmpty]) {
        ComPowerAnalyticsCore_sBundleId = bid;
      }
    }
  }
  else {
    ComPowerAnalyticsCore_sBundleId = bundleId;
    [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameBundleId withNSString:ComPowerAnalyticsCore_sBundleId];
  }
  if (userID == nil || [userID java_isEmpty]) {
    if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sUserID)) java_isEmpty]) {
      ComPowerAnalyticsCore_sUserID = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameUserID];
      if (ComPowerAnalyticsCore_sUserID == nil || [ComPowerAnalyticsCore_sUserID java_isEmpty]) {
        ComPowerAnalyticsCore_sUserID = [((JavaUtilUUID *) nil_chk(JavaUtilUUID_randomUUID())) description];
        [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameUserID withNSString:ComPowerAnalyticsCore_sUserID];
      }
    }
  }
  else {
    ComPowerAnalyticsCore_sUserID = userID;
    [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameUserID withNSString:ComPowerAnalyticsCore_sUserID];
  }
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sDUuid)) java_isEmpty]) {
    ComPowerAnalyticsCore_sDUuid = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameDUuid];
    if (ComPowerAnalyticsCore_sDUuid == nil || [ComPowerAnalyticsCore_sDUuid java_isEmpty]) {
      ComPowerAnalyticsCore_sDUuid = [((JavaUtilUUID *) nil_chk(JavaUtilUUID_randomUUID())) description];
      [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameDUuid withNSString:ComPowerAnalyticsCore_sDUuid];
    }
  }
}

- (void)dryRun_WithBoolean:(jboolean)dryRun {
  ComPowerAnalyticsCore_bDryRun = dryRun;
}

- (void)setEnvironmentProduction_WithBoolean:(jboolean)production {
  ComPowerAnalyticsCore_bProduction = production;
  [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameIsProduction withNSString:JavaLangBoolean_toStringWithBoolean_(ComPowerAnalyticsCore_bProduction)];
}

- (void)setStagingUrl_WithNSString:(NSString *)stagingUrl {
  ComPowerAnalyticsCore_sUrlStaging = stagingUrl;
}

- (void)setLastEnvironment {
  NSString *bp = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameIsProduction];
  if (bp != nil && ![bp java_isEmpty]) {
    ComPowerAnalyticsCore_bProduction = JavaLangBoolean_parseBooleanWithNSString_(bp);
  }
}

- (void)clearTmVars {
  ComPowerAnalyticsCore_clearTmVars(self);
}

- (void)videoMeasure_WithNSString:(NSString *)sessid
                     withNSString:(NSString *)label
                     withNSString:(NSString *)value
                     withNSString:(NSString *)value2 {
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, sessid, label, value, value2);
}

- (void)videoLoad_WithNSString:(NSString *)videoCategories
                  withNSString:(NSString *)videoId
                  withNSString:(NSString *)videoName {
  if (videoCategories == nil || [videoCategories java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"Video category should not empty");
    return;
  }
  if (videoId == nil || [videoId java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"Video ID should not empty");
    return;
  }
  if (videoName == nil || [videoName java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"Video name should not empty");
    return;
  }
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sUserID)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"UserID should not empty");
    return;
  }
  ComPowerAnalyticsCore_fLastVideoDuration = 0.0;
  ComPowerAnalyticsCore_clearTmVars(self);
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sHashVideoCtgIdName)) java_isEmpty]) {
    NSString *lctgidnm = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameVideoCtgIdName];
    if (lctgidnm != nil && ![lctgidnm java_isEmpty]) {
      ComPowerAnalyticsCore_sHashVideoCtgIdName = lctgidnm;
    }
  }
  jlong curtm = JavaLangSystem_currentTimeMillis();
  jlong ntm = [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS))) toSecondsWithLong:curtm];
  if (![((NSString *) nil_chk(ComPowerAnalyticsCore_sHashVideoCtgIdName)) java_isEmpty]) {
    NSString *hctgidnm = ComPowerAnalyticsCore_getHashWithNSString_(self, JreStrcat("$$", ComPowerAnalyticsCore_sUserID, videoName));
    if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sHashVideoCtgIdName)) isEqual:hctgidnm]) {
      if (![((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
        ComPowerAnalyticsCore_dpWithNSString_(JreStrcat("$J$J$J", @"exist sessid id with delta load = ", (ntm - ComPowerAnalyticsCore_nLastVideoEventTm), @" || ntm ", ntm, @" || lastTmEvent = ", ComPowerAnalyticsCore_nLastVideoEventTm));
        if ((ntm - ComPowerAnalyticsCore_nLastVideoEventTm) < 3 && ComPowerAnalyticsCore_nLastVideoEventTm != 0LL) {
          ComPowerAnalyticsCore_dpWithNSString_(@"videoLoad_: Using last session ID");
          ComPowerAnalyticsCore_bUsingLastSessId = true;
          return;
        }
        else {
          ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"x-unload", nil, nil);
          ComPowerAnalyticsCore_clearLoadData(self);
        }
      }
      else {
        NSString *lsessid = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameVideoSessionId];
        if (lsessid != nil && ![lsessid java_isEmpty]) {
          ComPowerAnalyticsCore_dpWithNSString_(JreStrcat("$J$J$J", @"exist sessid id with delta load = ", (ntm - ComPowerAnalyticsCore_nLastVideoEventTm), @" || ntm ", ntm, @" || lastTmEvent = ", ComPowerAnalyticsCore_nLastVideoEventTm));
          if ((ntm - ComPowerAnalyticsCore_nLastVideoEventTm) < 3 && ComPowerAnalyticsCore_nLastVideoEventTm != 0LL) {
            ComPowerAnalyticsCore_dpWithNSString_(@"videoLoad_: Using last session ID");
            ComPowerAnalyticsCore_bUsingLastSessId = true;
            return;
          }
          else {
            ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, lsessid, @"x-unload", nil, nil);
            ComPowerAnalyticsCore_clearLoadData(self);
          }
        }
      }
    }
    else {
      NSString *lsessid = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameVideoSessionId];
      if (lsessid != nil && ![lsessid java_isEmpty]) {
        ComPowerAnalyticsCore_dpWithNSString_(@"videoLoad_: Force unload last session ID");
        ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, lsessid, @"x-unload", nil, nil);
        ComPowerAnalyticsCore_clearLoadData(self);
      }
    }
  }
  ComPowerAnalyticsCore_dpWithNSString_(@"videoLoad_:3: Using new session ID");
  ComPowerAnalyticsCore_bUsingLastSessId = false;
  jlong tsms = JavaLangSystem_currentTimeMillis();
  ComPowerAnalyticsCore_sVideoMeasureSessionId = ComPowerAnalyticsCore_getHashWithNSString_(self, JreStrcat("$J$$$$$", ComPowerAnalyticsCore_sClientKey, tsms, ComPowerAnalyticsCore_sUserID, ComPowerAnalyticsCore_sDUuid, @"video_measure", videoId, videoName));
  [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameVideoSessionId withNSString:ComPowerAnalyticsCore_sVideoMeasureSessionId];
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"?geoip", nil, nil);
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"uadev", [self getDeviceDetails], nil);
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"userid", ComPowerAnalyticsCore_sUserID, nil);
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"duuid", ComPowerAnalyticsCore_sDUuid, nil);
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"load", nil, nil);
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"categories", videoCategories, nil);
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"id", videoId, nil);
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"name", videoName, nil);
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"sdk_ver", ComPowerAnalyticsCore_sSdkVer, nil);
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"app_ver", [self getAppVersion], nil);
  ComPowerAnalyticsCore_sHashVideoCtgIdName = ComPowerAnalyticsCore_getHashWithNSString_(self, JreStrcat("$$", ComPowerAnalyticsCore_sUserID, videoName));
  [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameVideoCtgIdName withNSString:ComPowerAnalyticsCore_sHashVideoCtgIdName];
}

- (void)videoAttributes_WithNSString:(NSString *)attributes {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoAttributes: video has not loaded yet");
    return;
  }
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sHashVideoAttributes)) java_isEmpty]) {
    NSString *lattr = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameVideoAttributes];
    if (lattr != nil && ![lattr java_isEmpty]) {
      ComPowerAnalyticsCore_sHashVideoAttributes = lattr;
    }
  }
  if (![((NSString *) nil_chk(ComPowerAnalyticsCore_sHashVideoAttributes)) java_isEmpty]) {
    NSString *hattr = ComPowerAnalyticsCore_getHashWithNSString_(self, JreStrcat("$$", ComPowerAnalyticsCore_sUserID, attributes));
    if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sHashVideoAttributes)) isEqual:hattr] && ComPowerAnalyticsCore_bUsingLastSessId) {
      ComPowerAnalyticsCore_dpWithNSString_(@"videoAttributes_: Using last attributes");
      return;
    }
  }
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"attributes", attributes, nil);
  ComPowerAnalyticsCore_sHashVideoAttributes = ComPowerAnalyticsCore_getHashWithNSString_(self, JreStrcat("$$", ComPowerAnalyticsCore_sUserID, attributes));
  [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameVideoAttributes withNSString:ComPowerAnalyticsCore_sHashVideoAttributes];
}

- (void)videoTags_WithNSString:(NSString *)tags {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoTags: video has not loaded yet");
    return;
  }
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sHashVideoTags)) java_isEmpty]) {
    NSString *ltags = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameVideoTags];
    if (ltags != nil && ![ltags java_isEmpty]) {
      ComPowerAnalyticsCore_sHashVideoTags = ltags;
    }
  }
  if (![((NSString *) nil_chk(ComPowerAnalyticsCore_sHashVideoTags)) java_isEmpty]) {
    NSString *htags = ComPowerAnalyticsCore_getHashWithNSString_(self, JreStrcat("$$", ComPowerAnalyticsCore_sUserID, tags));
    if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sHashVideoTags)) isEqual:htags] && ComPowerAnalyticsCore_bUsingLastSessId) {
      ComPowerAnalyticsCore_dpWithNSString_(@"videoTags_: Using last tags");
      return;
    }
  }
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"tags", tags, nil);
  ComPowerAnalyticsCore_sHashVideoTags = ComPowerAnalyticsCore_getHashWithNSString_(self, JreStrcat("$$", ComPowerAnalyticsCore_sUserID, tags));
  [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameVideoTags withNSString:ComPowerAnalyticsCore_sHashVideoTags];
}

- (jboolean)videoPlay_ {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoPlay: video has not loaded yet");
    return false;
  }
  jlong tsms = JavaLangSystem_currentTimeMillis();
  jint ntm = (jint) (JreLongDiv(tsms, 1000));
  if ((ntm - ComPowerAnalyticsCore_nVideoPlayTm) < 10) {
    return false;
  }
  ComPowerAnalyticsCore_clearTmVars(self);
  ComPowerAnalyticsCore_nVideoPlayTm = ntm;
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"play", nil, nil);
  return true;
}

- (void)videoPause_ {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoPause: video has not loaded yet");
    return;
  }
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"pause", nil, nil);
}

- (JavaLangBoolean *)videoPause_WithNSString:(NSString *)videoName {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoPause: video has not loaded yet");
    return JavaLangBoolean_valueOfWithBoolean_(false);
  }
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sHashVideoCtgIdName)) java_isEmpty]) {
    NSString *lctgidnm = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameVideoCtgIdName];
    if (lctgidnm != nil && ![lctgidnm java_isEmpty]) {
      ComPowerAnalyticsCore_sHashVideoCtgIdName = lctgidnm;
    }
  }
  NSString *hctgidnm = ComPowerAnalyticsCore_getHashWithNSString_(self, JreStrcat("$$", ComPowerAnalyticsCore_sUserID, videoName));
  if (![((NSString *) nil_chk(ComPowerAnalyticsCore_sHashVideoCtgIdName)) java_isEmpty] && [((NSString *) nil_chk(ComPowerAnalyticsCore_sHashVideoCtgIdName)) isEqual:hctgidnm]) {
    ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"pause", nil, nil);
    ComPowerAnalyticsCore_dpWithNSString_(@"videoPause_: pause session successful");
    return JavaLangBoolean_valueOfWithBoolean_(true);
  }
  ComPowerAnalyticsCore_dpWithNSString_(@"videoPause_: pause session abort. pause different content");
  return JavaLangBoolean_valueOfWithBoolean_(false);
}

- (void)videoComplete_ {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoComplete: video has not loaded yet");
    return;
  }
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"complete", nil, nil);
}

- (jboolean)videoBuffer_ {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoBuffer: video has not loaded yet");
    return false;
  }
  jlong tsms = JavaLangSystem_currentTimeMillis();
  jint ntm = (jint) (JreLongDiv(tsms, 1000));
  if ((ntm - ComPowerAnalyticsCore_nVideoBufferTm) < 10) {
    return false;
  }
  ComPowerAnalyticsCore_clearTmVars(self);
  ComPowerAnalyticsCore_nVideoBufferTm = ntm;
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"buffer", nil, nil);
  return true;
}

- (jboolean)videoDuration_WithDouble:(jdouble)duration {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoDuration: video has not loaded yet");
    return false;
  }
  if (ComPowerAnalyticsCore_fLastVideoDuration == duration) {
    return false;
  }
  ComPowerAnalyticsCore_fLastVideoDuration = duration;
  jint intDuration = JreFpToInt(duration);
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"duration", NSString_java_valueOfInt_(intDuration), nil);
  return true;
}

- (jboolean)videoPlaying_WithDouble:(jdouble)position {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoPlaying: video has not loaded yet");
    return false;
  }
  jlong tsms = JavaLangSystem_currentTimeMillis();
  jint ntm = (jint) (JreLongDiv(tsms, 1000));
  if ((ntm - ComPowerAnalyticsCore_nVideoPlayingTm) < 10) {
    return false;
  }
  ComPowerAnalyticsCore_clearTmVars(self);
  ComPowerAnalyticsCore_nVideoPlayingTm = ntm;
  jint intPos = JreFpToInt(position);
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"playing", nil, NSString_java_valueOfInt_(intPos));
  return true;
}

- (jboolean)videoBitrate_WithInt:(jint)audio
                         withInt:(jint)video {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoBitrate: video has not loaded yet");
    return false;
  }
  if (video < 1 && audio < 1) {
    return false;
  }
  else if (video < 0) video = 0;
  else if (audio < 0) audio = 0;
  jlong tsms = JavaLangSystem_currentTimeMillis();
  jint ntm = (jint) (JreLongDiv(tsms, 1000));
  if ((ntm - ComPowerAnalyticsCore_nVideoBitrateTm) < 10) {
    return false;
  }
  ComPowerAnalyticsCore_clearTmVars(self);
  ComPowerAnalyticsCore_nVideoBitrateTm = ntm;
  jboolean shouldTrack = false;
  if (ComPowerAnalyticsCore_nLastVideoBitrate != video) {
    ComPowerAnalyticsCore_nLastVideoBitrate = video;
    shouldTrack = true;
  }
  if (ComPowerAnalyticsCore_nLastAudioBitrate != audio) {
    ComPowerAnalyticsCore_nLastAudioBitrate = audio;
    shouldTrack = true;
  }
  if (shouldTrack) {
    ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"bitrate", JavaLangInteger_toStringWithInt_(audio), JavaLangInteger_toStringWithInt_(video));
    return true;
  }
  return false;
}

- (jboolean)videoSeek_WithDouble:(jdouble)position {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoSeek: video has not loaded yet");
    return false;
  }
  jlong tsms = JavaLangSystem_currentTimeMillis();
  jint ntm = (jint) (JreLongDiv(tsms, 1000));
  if ((ntm - ComPowerAnalyticsCore_nVideoSeekTm) < 10) {
    return false;
  }
  ComPowerAnalyticsCore_clearTmVars(self);
  ComPowerAnalyticsCore_nVideoSeekTm = ntm;
  jint intPos = JreFpToInt(position);
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"seek", nil, NSString_java_valueOfInt_(intPos));
  return true;
}

- (JavaLangBoolean *)videoUnload_WithNSString:(NSString *)videoName {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoUnload: video has not loaded yet");
    return JavaLangBoolean_valueOfWithBoolean_(false);
  }
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sHashVideoCtgIdName)) java_isEmpty]) {
    NSString *lctgidnm = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameVideoCtgIdName];
    if (lctgidnm != nil && ![lctgidnm java_isEmpty]) {
      ComPowerAnalyticsCore_sHashVideoCtgIdName = lctgidnm;
    }
  }
  NSString *hctgidnm = ComPowerAnalyticsCore_getHashWithNSString_(self, JreStrcat("$$", ComPowerAnalyticsCore_sUserID, videoName));
  if (![((NSString *) nil_chk(ComPowerAnalyticsCore_sHashVideoCtgIdName)) java_isEmpty] && [((NSString *) nil_chk(ComPowerAnalyticsCore_sHashVideoCtgIdName)) isEqual:hctgidnm]) {
    ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"unload", nil, nil);
    ComPowerAnalyticsCore_clearLoadData(self);
    ComPowerAnalyticsCore_dpWithNSString_(@"videoUnload_: unload session successful");
    return JavaLangBoolean_valueOfWithBoolean_(true);
  }
  ComPowerAnalyticsCore_dpWithNSString_(@"videoUnload_: unload session abort. unload different content");
  return JavaLangBoolean_valueOfWithBoolean_(false);
}

- (void)videoUnload_ {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoUnload: video has not loaded yet");
    return;
  }
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"unload", nil, nil);
  ComPowerAnalyticsCore_clearLoadData(self);
}

- (void)videoError_WithNSString:(NSString *)errorMessage {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoError: video has not loaded yet");
    return;
  }
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"error", nil, errorMessage);
}

- (void)videoAdPlay_WithNSString:(NSString *)tag {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoAdPlay: video has not loaded yet");
    return;
  }
  NSString *ltag = @"";
  if (tag != nil) {
    ltag = tag;
  }
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"ad_play", nil, ltag);
}

- (void)videoAdPause_WithNSString:(NSString *)tag {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoAdPause: video has not loaded yet");
    return;
  }
  NSString *ltag = @"";
  if (tag != nil) {
    ltag = tag;
  }
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"ad_pause", nil, ltag);
}

- (void)videoAdError_WithNSString:(NSString *)tag
                     withNSString:(NSString *)msg {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoAdError: video has not loaded yet");
    return;
  }
  NSString *ltag = @"";
  if (tag != nil) {
    ltag = tag;
  }
  NSString *lmsg = @"";
  if (msg != nil) {
    lmsg = msg;
  }
  NSString *lprm = JreStrcat("$C$", ltag, '|', lmsg);
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"ad_error", nil, lprm);
}

- (void)videoAdComplete_WithNSString:(NSString *)tag {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoAdComplete: video has not loaded yet");
    return;
  }
  NSString *ltag = @"";
  if (tag != nil) {
    ltag = tag;
  }
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"ad_complete", nil, ltag);
}

- (void)videoAdClicked_WithNSString:(NSString *)tag {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoAdSkipped: video has not loaded yet");
    return;
  }
  NSString *ltag = @"";
  if (tag != nil) {
    ltag = tag;
  }
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"ad_clicked", nil, ltag);
}

- (void)videoAdSkipped_WithNSString:(NSString *)tag {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoAdSkipped: video has not loaded yet");
    return;
  }
  NSString *ltag = @"";
  if (tag != nil) {
    ltag = tag;
  }
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"ad_skipped", nil, ltag);
}

- (void)videoAdLoad_WithNSString:(NSString *)tag {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoAdLoad: video has not loaded yet");
    return;
  }
  NSString *ltag = @"";
  if (tag != nil) {
    ltag = tag;
  }
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"ad_load", nil, ltag);
}

- (void)videoAdUnload_ {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoAdFinish: video has not loaded yet");
    return;
  }
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"ad_unload", nil, nil);
}

- (void)videoAdBuffer_ {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoAdBuffer: video has not loaded yet");
    return;
  }
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"ad_buffer", nil, nil);
}

- (void)videoAdAbr_WithInt:(jint)bitrate {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoAdBuffer: video has not loaded yet");
    return;
  }
  if (bitrate < 0) bitrate = 0;
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"ad_abr", JavaLangInteger_toStringWithInt_(bitrate), nil);
}

- (void)videoAdVbr_WithInt:(jint)bitrate {
  if ([((NSString *) nil_chk(ComPowerAnalyticsCore_sVideoMeasureSessionId)) java_isEmpty]) {
    ComPowerAnalyticsCore_dpWithNSString_(@"videoAdBuffer: video has not loaded yet");
    return;
  }
  if (bitrate < 0) bitrate = 0;
  ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(self, ComPowerAnalyticsCore_sVideoMeasureSessionId, @"ad_vbr", JavaLangInteger_toStringWithInt_(bitrate), nil);
}

- (void)flushDataWithBoolean:(jboolean)retry
                 withBoolean:(jboolean)flushAll {
  if (ComPowerAnalyticsCore_bOnFlushingData) {
    if (!retry) {
      ComPowerAnalyticsCore_dpWithNSString_(@"flushData: Force flush");
      ComPowerAnalyticsCore_bForceDataFlush = true;
    }
    return;
  }
  if (JavaLangBoolean_parseBooleanWithNSString_([self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameFlushState])) {
    ComPowerAnalyticsCore_doFlushDataWithNSString_(self, nil);
    return;
  }
  NSString *s = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameStore];
  if (s == nil || [s java_isEmpty]) {
    return;
  }
  NSString *t = @"";
  if (flushAll) {
    [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameFlush withNSString:s];
    [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameStore withNSString:t];
    ComPowerAnalyticsCore_doFlushDataWithNSString_(self, s);
    return;
  }
  @try {
    OrgJsonJSONArray *jas = new_OrgJsonJSONArray_initWithNSString_(s);
    if ([jas length] < ComPowerAnalyticsCore_nMaxIndexToFlush) {
      if (retry) {
        return;
      }
    }
    else {
      jint j = [jas length];
      OrgJsonJSONArray *jat = new_OrgJsonJSONArray_init();
      jint i;
      for (i = 0; i < j; i++) {
        (void) [jat putWithId:[jas getJSONObjectWithInt:i]];
      }
      for (i = 0; i < j; i++) {
        OrgJsonJSONArray *lja = ComPowerAnalyticsCore_removeFromJsonArrayWithOrgJsonJSONArray_withInt_(jas, 0);
        if (lja != nil) {
          jas = lja;
        }
      }
      s = [jat description];
      t = [jas description];
    }
  }
  @catch (JavaLangException *e) {
    ComPowerAnalyticsCore_dpWithNSString_(JreStrcat("$@", @"flushData:e: ", e));
  }
  [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameFlush withNSString:s];
  [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameStore withNSString:t];
  ComPowerAnalyticsCore_doFlushDataWithNSString_(self, s);
}

+ (OrgJsonJSONArray *)removeFromJsonArrayWithOrgJsonJSONArray:(OrgJsonJSONArray *)jsrc
                                                      withInt:(jint)index {
  return ComPowerAnalyticsCore_removeFromJsonArrayWithOrgJsonJSONArray_withInt_(jsrc, index);
}

- (void)clearLoadData {
  ComPowerAnalyticsCore_clearLoadData(self);
}

- (void)setLastTimeMillisEvent {
  ComPowerAnalyticsCore_setLastTimeMillisEvent(self);
}

- (void)doFlushDataWithNSString:(NSString *)data {
  ComPowerAnalyticsCore_doFlushDataWithNSString_(self, data);
}

- (NSString *)getSdkUserAgent {
  return ComPowerAnalyticsCore_getSdkUserAgent(self);
}

+ (void)peWithNSString:(NSString *)s
 withJavaLangException:(JavaLangException *)e {
  ComPowerAnalyticsCore_peWithNSString_withJavaLangException_(s, e);
}

- (NSString *)getHashWithNSString:(NSString *)s {
  return ComPowerAnalyticsCore_getHashWithNSString_(self, s);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 15, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 16, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0x4, 17, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 18, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 20, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 23, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0x4, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 26, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 27, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 28, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 29, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 30, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 31, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 32, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 35, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 36, 37, -1, -1, -1, -1 },
    { NULL, "LOrgJsonJSONArray;", 0x9, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 41, 42, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 43, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(dpWithNSString:);
  methods[2].selector = @selector(getDeviceDetails);
  methods[3].selector = @selector(getAppVersion);
  methods[4].selector = @selector(getAppStringWithNSString:);
  methods[5].selector = @selector(setAppStringWithNSString:withNSString:);
  methods[6].selector = @selector(setClientStuffWithNSString:withNSString:withNSString:withNSString:withNSString:);
  methods[7].selector = @selector(dryRun_WithBoolean:);
  methods[8].selector = @selector(setEnvironmentProduction_WithBoolean:);
  methods[9].selector = @selector(setStagingUrl_WithNSString:);
  methods[10].selector = @selector(setLastEnvironment);
  methods[11].selector = @selector(clearTmVars);
  methods[12].selector = @selector(videoMeasure_WithNSString:withNSString:withNSString:withNSString:);
  methods[13].selector = @selector(videoLoad_WithNSString:withNSString:withNSString:);
  methods[14].selector = @selector(videoAttributes_WithNSString:);
  methods[15].selector = @selector(videoTags_WithNSString:);
  methods[16].selector = @selector(videoPlay_);
  methods[17].selector = @selector(videoPause_);
  methods[18].selector = @selector(videoPause_WithNSString:);
  methods[19].selector = @selector(videoComplete_);
  methods[20].selector = @selector(videoBuffer_);
  methods[21].selector = @selector(videoDuration_WithDouble:);
  methods[22].selector = @selector(videoPlaying_WithDouble:);
  methods[23].selector = @selector(videoBitrate_WithInt:withInt:);
  methods[24].selector = @selector(videoSeek_WithDouble:);
  methods[25].selector = @selector(videoUnload_WithNSString:);
  methods[26].selector = @selector(videoUnload_);
  methods[27].selector = @selector(videoError_WithNSString:);
  methods[28].selector = @selector(videoAdPlay_WithNSString:);
  methods[29].selector = @selector(videoAdPause_WithNSString:);
  methods[30].selector = @selector(videoAdError_WithNSString:withNSString:);
  methods[31].selector = @selector(videoAdComplete_WithNSString:);
  methods[32].selector = @selector(videoAdClicked_WithNSString:);
  methods[33].selector = @selector(videoAdSkipped_WithNSString:);
  methods[34].selector = @selector(videoAdLoad_WithNSString:);
  methods[35].selector = @selector(videoAdUnload_);
  methods[36].selector = @selector(videoAdBuffer_);
  methods[37].selector = @selector(videoAdAbr_WithInt:);
  methods[38].selector = @selector(videoAdVbr_WithInt:);
  methods[39].selector = @selector(flushDataWithBoolean:withBoolean:);
  methods[40].selector = @selector(removeFromJsonArrayWithOrgJsonJSONArray:withInt:);
  methods[41].selector = @selector(clearLoadData);
  methods[42].selector = @selector(setLastTimeMillisEvent);
  methods[43].selector = @selector(doFlushDataWithNSString:);
  methods[44].selector = @selector(getSdkUserAgent);
  methods[45].selector = @selector(peWithNSString:withJavaLangException:);
  methods[46].selector = @selector(getHashWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sDUuid", "LNSString;", .constantValue.asLong = 0, 0xc, -1, 44, -1, -1 },
    { "sClientKey", "LNSString;", .constantValue.asLong = 0, 0xc, -1, 45, -1, -1 },
    { "sBundleId", "LNSString;", .constantValue.asLong = 0, 0xc, -1, 46, -1, -1 },
    { "sPlatform", "LNSString;", .constantValue.asLong = 0, 0xc, -1, 47, -1, -1 },
    { "bProduction", "Z", .constantValue.asLong = 0, 0xc, -1, 48, -1, -1 },
    { "bDryRun", "Z", .constantValue.asLong = 0, 0xc, -1, 49, -1, -1 },
    { "bUsingLastSessId", "Z", .constantValue.asLong = 0, 0xc, -1, 50, -1, -1 },
    { "sProductDomain", "LNSString;", .constantValue.asLong = 0, 0xc, -1, 51, -1, -1 },
    { "sUserID", "LNSString;", .constantValue.asLong = 0, 0xc, -1, 52, -1, -1 },
    { "bOnFlushingData", "Z", .constantValue.asLong = 0, 0xa, -1, 53, -1, -1 },
    { "bForceDataFlush", "Z", .constantValue.asLong = 0, 0xa, -1, 54, -1, -1 },
    { "sUrlStaging", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 55, -1, -1 },
    { "sSdkVer", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 56, -1, -1 },
    { "nMaxIndexToFlush", "I", .constantValue.asInt = ComPowerAnalyticsCore_nMaxIndexToFlush, 0x1a, -1, -1, -1, -1 },
    { "sFnameStore", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 57, -1, -1 },
    { "sFnameFlush", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 58, -1, -1 },
    { "sFnameDUuid", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 59, -1, -1 },
    { "sFnameUserID", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 60, -1, -1 },
    { "sFnameClientKey", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 61, -1, -1 },
    { "sFnameProductDomain", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 62, -1, -1 },
    { "sFnameBundleId", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 63, -1, -1 },
    { "sFnameIsProduction", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 64, -1, -1 },
    { "sFnameVideoSessionId", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 65, -1, -1 },
    { "sFnameVideoCtgIdName", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 66, -1, -1 },
    { "sFnameVideoAttributes", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 67, -1, -1 },
    { "sFnameVideoTags", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 68, -1, -1 },
    { "sFnameLastTsEvent", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 69, -1, -1 },
    { "sFnameFlushState", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 70, -1, -1 },
    { "sVideoMeasureSessionId", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 71, -1, -1 },
    { "sHashVideoCtgIdName", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 72, -1, -1 },
    { "sHashVideoAttributes", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 73, -1, -1 },
    { "sHashVideoTags", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 74, -1, -1 },
    { "fLastVideoDuration", "D", .constantValue.asLong = 0, 0xa, -1, 75, -1, -1 },
    { "nVideoPlayTm", "I", .constantValue.asLong = 0, 0xa, -1, 76, -1, -1 },
    { "nVideoPlayingTm", "I", .constantValue.asLong = 0, 0xa, -1, 77, -1, -1 },
    { "nVideoBufferTm", "I", .constantValue.asLong = 0, 0xa, -1, 78, -1, -1 },
    { "nVideoSeekTm", "I", .constantValue.asLong = 0, 0xa, -1, 79, -1, -1 },
    { "nVideoBitrateTm", "I", .constantValue.asLong = 0, 0xa, -1, 80, -1, -1 },
    { "nLastVideoBitrate", "I", .constantValue.asLong = 0, 0xa, -1, 81, -1, -1 },
    { "nLastAudioBitrate", "I", .constantValue.asLong = 0, 0xa, -1, 82, -1, -1 },
    { "nLastVideoEventTm", "J", .constantValue.asLong = 0, 0xa, -1, 83, -1, -1 },
  };
  static const void *ptrTable[] = { "dp", "LNSString;", "getAppString", "setAppString", "LNSString;LNSString;", "setClientStuff", "LNSString;LNSString;LNSString;LNSString;LNSString;", "dryRun_", "Z", "setEnvironmentProduction_", "setStagingUrl_", "videoMeasure_", "LNSString;LNSString;LNSString;LNSString;", "videoLoad_", "LNSString;LNSString;LNSString;", "videoAttributes_", "videoTags_", "videoPause_", "videoDuration_", "D", "videoPlaying_", "videoBitrate_", "II", "videoSeek_", "videoUnload_", "videoError_", "videoAdPlay_", "videoAdPause_", "videoAdError_", "videoAdComplete_", "videoAdClicked_", "videoAdSkipped_", "videoAdLoad_", "videoAdAbr_", "I", "videoAdVbr_", "flushData", "ZZ", "removeFromJsonArray", "LOrgJsonJSONArray;I", "doFlushData", "pe", "LNSString;LJavaLangException;", "getHash", &ComPowerAnalyticsCore_sDUuid, &ComPowerAnalyticsCore_sClientKey, &ComPowerAnalyticsCore_sBundleId, &ComPowerAnalyticsCore_sPlatform, &ComPowerAnalyticsCore_bProduction, &ComPowerAnalyticsCore_bDryRun, &ComPowerAnalyticsCore_bUsingLastSessId, &ComPowerAnalyticsCore_sProductDomain, &ComPowerAnalyticsCore_sUserID, &ComPowerAnalyticsCore_bOnFlushingData, &ComPowerAnalyticsCore_bForceDataFlush, &ComPowerAnalyticsCore_sUrlStaging, &ComPowerAnalyticsCore_sSdkVer, &ComPowerAnalyticsCore_sFnameStore, &ComPowerAnalyticsCore_sFnameFlush, &ComPowerAnalyticsCore_sFnameDUuid, &ComPowerAnalyticsCore_sFnameUserID, &ComPowerAnalyticsCore_sFnameClientKey, &ComPowerAnalyticsCore_sFnameProductDomain, &ComPowerAnalyticsCore_sFnameBundleId, &ComPowerAnalyticsCore_sFnameIsProduction, &ComPowerAnalyticsCore_sFnameVideoSessionId, &ComPowerAnalyticsCore_sFnameVideoCtgIdName, &ComPowerAnalyticsCore_sFnameVideoAttributes, &ComPowerAnalyticsCore_sFnameVideoTags, &ComPowerAnalyticsCore_sFnameLastTsEvent, &ComPowerAnalyticsCore_sFnameFlushState, &ComPowerAnalyticsCore_sVideoMeasureSessionId, &ComPowerAnalyticsCore_sHashVideoCtgIdName, &ComPowerAnalyticsCore_sHashVideoAttributes, &ComPowerAnalyticsCore_sHashVideoTags, &ComPowerAnalyticsCore_fLastVideoDuration, &ComPowerAnalyticsCore_nVideoPlayTm, &ComPowerAnalyticsCore_nVideoPlayingTm, &ComPowerAnalyticsCore_nVideoBufferTm, &ComPowerAnalyticsCore_nVideoSeekTm, &ComPowerAnalyticsCore_nVideoBitrateTm, &ComPowerAnalyticsCore_nLastVideoBitrate, &ComPowerAnalyticsCore_nLastAudioBitrate, &ComPowerAnalyticsCore_nLastVideoEventTm, "LComPowerAnalyticsCore_AnalyticsHit;" };
  static const J2ObjcClassInfo _ComPowerAnalyticsCore = { "Core", "com.power.analytics", ptrTable, methods, fields, 7, 0x1, 47, 41, -1, 84, -1, -1, -1 };
  return &_ComPowerAnalyticsCore;
}

@end

void ComPowerAnalyticsCore_init(ComPowerAnalyticsCore *self) {
  NSObject_init(self);
}

ComPowerAnalyticsCore *new_ComPowerAnalyticsCore_init() {
  J2OBJC_NEW_IMPL(ComPowerAnalyticsCore, init)
}

ComPowerAnalyticsCore *create_ComPowerAnalyticsCore_init() {
  J2OBJC_CREATE_IMPL(ComPowerAnalyticsCore, init)
}

void ComPowerAnalyticsCore_dpWithNSString_(NSString *s) {
  ComPowerAnalyticsCore_initialize();
  if (!ComPowerAnalyticsCore_bProduction) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"PowerAnalytics:MDACore:", s)];
}

void ComPowerAnalyticsCore_clearTmVars(ComPowerAnalyticsCore *self) {
  ComPowerAnalyticsCore_nVideoPlayTm = ComPowerAnalyticsCore_nVideoPlayingTm = ComPowerAnalyticsCore_nVideoBufferTm = ComPowerAnalyticsCore_nVideoSeekTm = ComPowerAnalyticsCore_nVideoBitrateTm = 0;
}

void ComPowerAnalyticsCore_videoMeasure_WithNSString_withNSString_withNSString_withNSString_(ComPowerAnalyticsCore *self, NSString *sessid, NSString *label, NSString *value, NSString *value2) {
  ComPowerAnalyticsCore_setLastTimeMillisEvent(self);
  jlong ntsms = JavaLangSystem_currentTimeMillis();
  NSString *stsms = JavaLangLong_toStringWithLong_(ntsms);
  [self flushDataWithBoolean:true withBoolean:false];
  NSString *s = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameStore];
  if (s == nil || [s java_isEmpty]) {
    s = @"[]";
  }
  jint maxlength = 0;
  NSString *sprefix = @"";
  @try {
    OrgJsonJSONObject *jo = new_OrgJsonJSONObject_init();
    (void) [jo putWithNSString:@"tsclient" withLong:ntsms];
    (void) [jo putWithNSString:@"sessid" withId:sessid];
    (void) [jo putWithNSString:@"group" withId:@"video_measure"];
    if ([((NSString *) nil_chk(label)) java_hasPrefix:@"x-"]) {
      NSString *sx = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameLastTsEvent];
      if (sx != nil && ![sx java_isEmpty]) {
        jlong nx = JavaLangLong_parseLongWithNSString_(sx);
        stsms = JavaLangLong_toStringWithLong_(nx + 5000);
      }
      label = [label java_substring:2];
    }
    (void) [jo putWithNSString:@"label" withId:label];
    NSString *lvalue = value == nil ? stsms : value;
    if (value2 != nil && ![value2 java_isEmpty]) {
      (void) JreStrAppendStrong(&lvalue, "$", (JreStrcat("C$", ',', value2)));
    }
    (void) [jo putWithNSString:@"value" withId:JreStrcat("$$", sprefix, lvalue)];
    OrgJsonJSONArray *ja = new_OrgJsonJSONArray_initWithNSString_(s);
    (void) [ja putWithId:jo];
    maxlength = [ja length];
    s = [ja description];
    [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameLastTsEvent withNSString:stsms];
  }
  @catch (JavaLangException *e) {
    ComPowerAnalyticsCore_dpWithNSString_(JreStrcat("$@", @"videoMeasure_:e: ", e));
  }
  [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameStore withNSString:s];
  if (maxlength >= ComPowerAnalyticsCore_nMaxIndexToFlush) {
    [self flushDataWithBoolean:false withBoolean:false];
  }
  if ([((NSString *) nil_chk(label)) isEqual:@"unload"] || [label isEqual:@"pause"] || [label isEqual:@"playing"] || [label java_contains:@"error"] || [label isEqual:@"tags"] || [label isEqual:@"play"]) {
    [self flushDataWithBoolean:false withBoolean:true];
  }
}

OrgJsonJSONArray *ComPowerAnalyticsCore_removeFromJsonArrayWithOrgJsonJSONArray_withInt_(OrgJsonJSONArray *jsrc, jint index) {
  ComPowerAnalyticsCore_initialize();
  if (index < 0 || index >= [((OrgJsonJSONArray *) nil_chk(jsrc)) length]) {
    return nil;
  }
  OrgJsonJSONArray *jarr = nil;
  @try {
    jarr = new_OrgJsonJSONArray_init();
    for (jint i = 0, count = [((OrgJsonJSONArray *) nil_chk(jsrc)) length]; i < count; i++) {
      if (i != index) (void) [jarr putWithId:[jsrc getWithInt:i]];
    }
  }
  @catch (JavaLangException *e) {
    ComPowerAnalyticsCore_peWithNSString_withJavaLangException_(@"removeFromJsonArray ", e);
  }
  return jarr;
}

void ComPowerAnalyticsCore_clearLoadData(ComPowerAnalyticsCore *self) {
  ComPowerAnalyticsCore_sVideoMeasureSessionId = @"";
  [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameVideoSessionId withNSString:ComPowerAnalyticsCore_sVideoMeasureSessionId];
  ComPowerAnalyticsCore_sHashVideoCtgIdName = @"";
  [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameVideoCtgIdName withNSString:ComPowerAnalyticsCore_sHashVideoCtgIdName];
  ComPowerAnalyticsCore_sHashVideoAttributes = @"";
  [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameVideoAttributes withNSString:ComPowerAnalyticsCore_sHashVideoAttributes];
  ComPowerAnalyticsCore_sHashVideoTags = @"";
  [self setAppStringWithNSString:ComPowerAnalyticsCore_sFnameVideoTags withNSString:ComPowerAnalyticsCore_sHashVideoTags];
}

void ComPowerAnalyticsCore_setLastTimeMillisEvent(ComPowerAnalyticsCore *self) {
  ComPowerAnalyticsCore_nLastVideoEventTm = [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS))) toSecondsWithLong:JavaLangSystem_currentTimeMillis()];
}

void ComPowerAnalyticsCore_doFlushDataWithNSString_(ComPowerAnalyticsCore *self, NSString *data) {
  if (data == nil || [data java_isEmpty]) {
    data = [self getAppStringWithNSString:ComPowerAnalyticsCore_sFnameFlush];
    if (data == nil || [data java_isEmpty]) {
      return;
    }
  }
  ComPowerAnalyticsCore_AnalyticsHit *ah = new_ComPowerAnalyticsCore_AnalyticsHit_initWithComPowerAnalyticsCore_withNSString_(self, data);
  (void) [ah executeWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
}

NSString *ComPowerAnalyticsCore_getSdkUserAgent(ComPowerAnalyticsCore *self) {
  NSString *s = JreStrcat("$$$$$$", @"MncDigitalSdk: ", ComPowerAnalyticsCore_sSdkVer, @", Platform: ", ComPowerAnalyticsCore_sPlatform, @", BundleID: ", ComPowerAnalyticsCore_sBundleId);
  return s;
}

void ComPowerAnalyticsCore_peWithNSString_withJavaLangException_(NSString *s, JavaLangException *e) {
  ComPowerAnalyticsCore_initialize();
  IOSObjectArray *stackTrace = [((JavaLangException *) nil_chk(e)) getStackTrace];
  {
    IOSObjectArray *a__ = stackTrace;
    JavaLangStackTraceElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangStackTraceElement * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangStackTraceElement *element = *b__++;
      NSString *em = JreStrcat("$$$$$I$$C", @"Exception thrown from ", [((JavaLangStackTraceElement *) nil_chk(element)) getMethodName], @" in class ", [element getClassName], @" [on line number ", [element getLineNumber], @" of file ", [element getFileName], ']');
      ComPowerAnalyticsCore_dpWithNSString_(JreStrcat("$$$", s, @": ", em));
    }
  }
}

NSString *ComPowerAnalyticsCore_getHashWithNSString_(ComPowerAnalyticsCore *self, NSString *s) {
  NSString *sres;
  @try {
    JavaSecurityMessageDigest *md = JavaSecurityMessageDigest_getInstanceWithNSString_(@"MD5");
    [((JavaSecurityMessageDigest *) nil_chk(md)) updateWithByteArray:[((NSString *) nil_chk(s)) java_getBytesWithCharsetName:@"UTF-8"]];
    IOSByteArray *digest = [md digest];
    JavaLangStringBuilder *hexString = new_JavaLangStringBuilder_init();
    {
      IOSByteArray *a__ = digest;
      jbyte const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
      jbyte const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jbyte b = *b__++;
        (void) [hexString appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"%02x", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangByte_valueOfWithByte_(b) } count:1 type:NSObject_class_()])];
      }
    }
    sres = [hexString description];
  }
  @catch (JavaLangException *e) {
    ComPowerAnalyticsCore_dpWithNSString_(JreStrcat("$@", @"getMD5:e: ", e));
    sres = [((JavaUtilUUID *) nil_chk(JavaUtilUUID_randomUUID())) description];
  }
  return sres;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComPowerAnalyticsCore)

@implementation ComPowerAnalyticsCore_AnalyticsHit

- (instancetype)initWithComPowerAnalyticsCore:(ComPowerAnalyticsCore *)outer$
                                 withNSString:(NSString *)data {
  ComPowerAnalyticsCore_AnalyticsHit_initWithComPowerAnalyticsCore_withNSString_(self, outer$, data);
  return self;
}

- (void)ttDone {
  *JreLoadStaticRef(ComPowerAnalyticsCore, bOnFlushingData) = false;
  if (sData_ == nil) {
    [this$0_ setAppStringWithNSString:ComPowerAnalyticsCore_sFnameFlush withNSString:@""];
    if (JreLoadStatic(ComPowerAnalyticsCore, bForceDataFlush)) {
      *JreLoadStaticRef(ComPowerAnalyticsCore, bForceDataFlush) = false;
      [this$0_ flushDataWithBoolean:true withBoolean:true];
    }
    return;
  }
  [this$0_ setAppStringWithNSString:ComPowerAnalyticsCore_sFnameFlushState withNSString:@"true"];
}

- (id)ttBackground {
  if ([((NSString *) nil_chk(sData_)) isEqual:@"[]"]) {
    sData_ = nil;
    return nil;
  }
  NSString *mdaurl = JreLoadStatic(ComPowerAnalyticsCore, bProduction) ? (JreStrcat("$$", @"https://", JreLoadStatic(ComPowerAnalyticsCore, sProductDomain))) : JreLoadStatic(ComPowerAnalyticsCore, sUrlStaging);
  NSString *urlTarget = JreStrcat("$$$", mdaurl, @"/api/", JreLoadStatic(ComPowerAnalyticsCore, sClientKey));
  ComPowerAnalyticsCore_dpWithNSString_(JreStrcat("$$$$", @"AnalyticsHit:UrlTarget: ", urlTarget, @", sData: ", sData_));
  if (JreLoadStatic(ComPowerAnalyticsCore, bDryRun)) {
    sData_ = nil;
    return nil;
  }
  NSString *charset = @"UTF-8";
  JavaNetURL *url;
  JavaxNetSslHttpsURLConnection *urlconn;
  @try {
    url = new_JavaNetURL_initWithNSString_(urlTarget);
    urlconn = (JavaxNetSslHttpsURLConnection *) cast_chk([url openConnection], [JavaxNetSslHttpsURLConnection class]);
    [((JavaxNetSslHttpsURLConnection *) nil_chk(urlconn)) setConnectTimeoutWithInt:6000];
    [urlconn setReadTimeoutWithInt:6000];
    [urlconn setRequestPropertyWithNSString:@"User-Agent" withNSString:ComPowerAnalyticsCore_getSdkUserAgent(this$0_)];
    [urlconn setRequestPropertyWithNSString:@"Origin" withNSString:JreStrcat("$$", mdaurl, @"/sdk/origin")];
    [urlconn setRequestPropertyWithNSString:@"Referer" withNSString:JreStrcat("$$", mdaurl, @"/sdk/referer")];
    [urlconn setRequestPropertyWithNSString:@"Content-Type" withNSString:@"text/plain"];
    [urlconn setDoOutputWithBoolean:true];
    [urlconn setUseCachesWithBoolean:false];
    [((JavaIoOutputStream *) nil_chk([urlconn getOutputStream])) writeWithByteArray:[((NSString *) nil_chk(sData_)) java_getBytesWithCharsetName:charset]];
    jint responseCode = [urlconn getResponseCode];
    jint x = responseCode - 199;
    JavaIoInputStream *is = x > 0 && x < 10 ? [urlconn getInputStream] : [urlconn getErrorStream];
    if (is == nil) {
      return nil;
    }
    ComPowerAnalyticsCore_dpWithNSString_(@"AnalyticsHit:sData:sent");
    sData_ = nil;
  }
  @catch (JavaLangException *e) {
    ComPowerAnalyticsCore_peWithNSString_withJavaLangException_(@"AnalyticsHit", e);
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComPowerAnalyticsCore:withNSString:);
  methods[1].selector = @selector(ttDone);
  methods[2].selector = @selector(ttBackground);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComPowerAnalyticsCore;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "sData_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComPowerAnalyticsCore;LNSString;", "LComPowerAnalyticsCore;" };
  static const J2ObjcClassInfo _ComPowerAnalyticsCore_AnalyticsHit = { "AnalyticsHit", "com.power.analytics", ptrTable, methods, fields, 7, 0x2, 3, 2, 1, -1, -1, -1, -1 };
  return &_ComPowerAnalyticsCore_AnalyticsHit;
}

@end

void ComPowerAnalyticsCore_AnalyticsHit_initWithComPowerAnalyticsCore_withNSString_(ComPowerAnalyticsCore_AnalyticsHit *self, ComPowerAnalyticsCore *outer$, NSString *data) {
  self->this$0_ = outer$;
  ComPowerAnalyticsTTask_init(self);
  self->sData_ = data;
  *JreLoadStaticRef(ComPowerAnalyticsCore, bOnFlushingData) = true;
  [outer$ setAppStringWithNSString:ComPowerAnalyticsCore_sFnameFlushState withNSString:@"false"];
}

ComPowerAnalyticsCore_AnalyticsHit *new_ComPowerAnalyticsCore_AnalyticsHit_initWithComPowerAnalyticsCore_withNSString_(ComPowerAnalyticsCore *outer$, NSString *data) {
  J2OBJC_NEW_IMPL(ComPowerAnalyticsCore_AnalyticsHit, initWithComPowerAnalyticsCore_withNSString_, outer$, data)
}

ComPowerAnalyticsCore_AnalyticsHit *create_ComPowerAnalyticsCore_AnalyticsHit_initWithComPowerAnalyticsCore_withNSString_(ComPowerAnalyticsCore *outer$, NSString *data) {
  J2OBJC_CREATE_IMPL(ComPowerAnalyticsCore_AnalyticsHit, initWithComPowerAnalyticsCore_withNSString_, outer$, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComPowerAnalyticsCore_AnalyticsHit)
